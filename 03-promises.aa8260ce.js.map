{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAK2F,SAAlFC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUQ,MAAAP,IAEpBG,EAAO,CAAEJ,WAAUQ,MAAAP,G,GAEpBA,E,IAIP,IAAMQ,EAASC,SAASC,cAAc,mBAChCC,EAAmBF,SAASC,cAAc,yBAC1CE,EAAQH,SAASC,cAAc,kBAC/BG,EAAYJ,SAASC,cAAc,iBAKqEC,EAA7FG,iBAAiB,SAAS,SAAAC,GACzCA,EAAIC,iBAIJ,IAHA,IAAMC,EAAaC,OAAON,EAAMO,OAC1BC,EAAOF,OAAOL,EAAUM,OAErBE,EAAQ,EAAGA,EAAQb,EAAOW,MAAOE,GAAS,EACjDvB,EAAcuB,EAAO,EAAGJ,EAAaG,EAAOC,GAAOC,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALhB,MACrEkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAN,G,IAAGxB,EAAQwB,EAARxB,SAAU+B,EAAKP,EAALhB,MAClBkB,EAAA7B,GAAS8B,OAAOK,QAAQ,sBAAqCH,OAAf7B,EAAS,QAAY6B,OAANE,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst amount = document.querySelector('[name=\"amount\"]');\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nbtnCreatePromise.addEventListener('click', evn => {\n  evn.preventDefault();\n  const delayFirst = Number(delay.value);\n  const step = Number(delayStep.value);\n\n  for (let index = 0; index < amount.value; index += 1) {\n    createPromise(index +1, delayFirst + step * index).then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });;\n  }\n});\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","$ce04d3a99e08e73b$var$amount","document","querySelector","$ce04d3a99e08e73b$var$btnCreatePromise","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$delayStep","addEventListener","evn","preventDefault","delayFirst","Number","value","step","index","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure"],"version":3,"file":"03-promises.aa8260ce.js.map"}